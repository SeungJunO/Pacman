-----------------------------------------eval() 함수 설명 ------------------------------------------------------------------

eval()은 파이썬의 수식을 문자열로 받아서 실행하고 그 결과를 반환한다.

-----------------------------------------exec() 함수 설명 ------------------------------------------------------------------

exec() 함수는 수식 뿐만 아니라 모든 파이썬 문장을 받아서 실행

-----------------------------------------eval() 함수와 exec() 함수의 차이--------------------------------------------------

– eval() 함수는 값을 반환하지만 exec() 함수는 값을 반환하지 않음

-----------------------------------------float() 함수 설명-------------------------------------------------------------------

float() 함수는 문자열을 부동소수점수로 변환하는 기능을 한다

------------------------------------------list() 함수 설명---------------------------------------------------------------------

list() 함수는 시퀀스 객체를 받아서 리스트로 변환하는 함수

------------------------------------------max() 함수 설명--------------------------------------------------------------------

max() 함수는 리스트나 튜플, 문자열에서 가장 큰 항목을 반환한다.

------------------------------------------sorted() 함수 설명 -----------------------------------------------------------------

sorted(iterable, [key], [reverse])
-reverse 변수는 부울형으로 True 이면 내림차순
– Iterable 객체 안에 들어있는 항목들로부터 정렬된 리스트를 생성하여 반환
– 기존의 리스트를 변경하는 것이 아니라 정렬된 새로운 리스트를 반환

-----------------------------------------lambda 함수 설명------------------------------------------------------------------

– 익명함수, 임시 함수 , 함수가 생성된 곳에만 필요
– 간단한 기능을 일반적인 함수와 같이 정의해두고 쓰는 것이 아니고 
필요한 곳에서 즉시 사용하고 버릴 수 있음
– lambda 인자리스트: 표현식
– ‘return’ 문이 포함되어 있지 않음

------------------------------------------이터러블 객체 설명-----------------------------------------------------------------

파이썬에서는 for 루프와 함께 사용할 수 있는 여러 종류의 객체가 있으며 
이들 객체는 이터러블 객체 (iterable object)라고 불림
– 값을 하나씩 차례대로 반환 가능한 객체
– 이터러블 객체: 문자열, 리스트, 튜플, 셋, 딕셔너리, 파일
– iterator를 리턴 할 수 있는 객체
– iterable하다고 해서 iterator라고 할 수는 없음
➔ 이터레이터로 만들어야 함
• iter() 함수를 사용하거나 for 문을 사용

------------------------------------------Iterator Object 설명----------------------------------------------------------------

– 순차적으로 다음 데이터를 리턴 할 수 있는 객체
– 다음과 같은 같은 2개의 메소드를 구현
• __iter__ () : iterator 객체를 생성할 수 있음, 이터러블 객체 자신을 반환
• __next__ () : iterator의 다음 반복을 위한 값(순환하는 다음 값)을 반환. 
만약 더 이상의 값이 없으면 StopIteration 예외를 발생 시킴
– iter() 대신 간단히 for 구문을 이용하여 각 데이터를 순차적 접근이 가능
• for문이 looping 하는 동안 파이썬 내부에서 임시로 리스트를 이터레이터로 자동으로 
변화해주어 매번 next 함수로 iterator의 다음 값을 읽어내는 것임
• StopIteration 발생할 때까지 next 함수를 호출한다고 보면 됨

------------------------------------------제너레이터 설명--------------------------------------------------------------------

제너레이터(generators)는 키워드 yield를 사용하여 함수로부터 이터레이터를 생성하는 하나의 방법이다.

-----------------------------------제너레이터와 이터레이터 차이-----------------------------------------------------

▪ 이터레이터는 클래스를 이용해 이터러블 객체를 생성 하는 것
▪ 제너레이터는 함수를 이용하여 이터러블 객체를 생성 하는 것

------------------------------------------클로저 설명-------------------------------------------------------------------------

클로저(closure)는 함수에 의하여 반환되는 함수
– 코드의 중복을 막기위해 클로저를 사용
– 클로저를 사용하기 위해 충족해야 하는 조건
• 중첩된 함수가 있어야함
• 중첩된 함수(nested func)는 둘러싸는 함수(enclosing func)에 정의된 값을 참조해야 함
• 둘러싸는 함수(enclosing func) 는 중첩 함수 (nested func)를 반환해야 함
자신을 포함하고 있는 외부함수보다내부함수가 더 오래 유지되는 경우, 
외부 함수 밖에서 내부함수가 호출되더라도 외부함수의 지역변수에 접근할 수 있는데 
이러한 함수를 클로저(Closure)라고 부른다.

------------------------------------------연산자 오버로딩--------------------------------------------------------------------

연산자를 메소드로 정의하는 것을 연산자 오버로딩(operator overloading)이라고 한다
메소드 명이 동일하나 파라미터의 수나 데이터 타입이 다른 경우
 오버라이딩 : 재정의 -> 부모로 부터 상속받은 기능 즉 메서드가
기능적으로 불필요한 경우에 자식 클래스가 다시 정의하는 것
- 이름, 매개변수, 리턴타입이 같아야 함

------------------------------------객체를 복사하는 2가지 방법--------------------------------------------------------

– 얇은 복사 (shallow copy) : 객체의 참조값만 복사되고 객체자체는 복사되지 않음
clone2 = colors 리스트를 참조하는 변수 생성
– 깊은 복사 (deep copy) : 객체까지 복사됨
copy.copy()는 얕은 복사
▪ 전달한 인자의 종류에 따라서 다름
▪ 해당 인자가 mutable 객체라면 복사본이 반환이 되고, 
immutable 객체라면 원본과 같은 것이 반환

------------------------------------------상속 설명---------------------------------------------------------------------------

상속(inheritance)은 기존에 존재하는 클래스로부터 코드와 데이터를 이어받고
자신이 필요한 기능을 추가하는 기법
– 인스턴스 변수와 메소드를 상속받아서 새로운 클래스를 파생하는 메커니즘
– 이미 작성되어 검증된 소프트웨어를 재사용 → 신뢰성 있는 소프트웨어 개발 및 유지
보수가 가능
– 여러 클래스에 공통적인 코드들을 하나의 클래스로 모을 수 있음 → 중복 줄임
하나의 객체가 다른 객체의 특수한 버전일 때, 그들 사이에는 “is-a”관계가 있음
▪ 객체 지향 프로그래밍에서는 상속이 클래스 간의 “is-a” 관계를 생성하는데 사용됨
보통 자식 클래스가 부모 클래스의 기능을 확장한다고 함
– 부모 클래스: 일반적인 클래스
– 자식 클래스: 특수한 클래스로 부모클래스의 확장 버전
자식 클래스
– 코드의 재작성 없이 부모 클래스의 속성과 메소드를 상속함
– 새로운 속성 및 메소드 추가 가능
– 이렇게 추가된 속성과 메소드가 자식 클래스를 부모클래스의 특수한 버전으로 만듦
▪ 자식 클래스에서는 부모 클래스의 메소드 중 필요한 것을 다시 정의할 수 있음
– “자식 클래스의 메소드가 부모 클래스의 메소드를 오버라이드(재정의)한다“
– 메소드의 이름, 매개변수, 반환형 동일

------------------------------------------다형성 설명-------------------------------------------------------------------------

다형성(polymorphism)은 “많은(poly)+모양(morph)“이라는 의미로서 주로 프로그래밍 언어에서
하나의 식별자로 다양한 타입(클래스)을 처리하는 것을 의미
– 똑같은 명령을 내리지만 객체의 타입이 다르면 서로 다른 결과를 얻을 수 있는 것
– 메시지를 보내는 측에서는 객체가 어떤 타입인지 알 필요가 없음
– 실행 시간에 객체의 타입에 따라 자동적으로 적합한 동작이 결정 됨

--------------------------------------------------------------------------------------------------------------------------------

is-a 관계: 상속
 has-a 관계 : 구성 관계(composition) 또는 집합 관계(aggregation)
– 하나의 객체가 다른 객체의 부품이 됨
– 상속을 이용하는 것이 아니라 하나의 클래스 안에 다른 클래스의 객체를 포함 시키는 것

------------------------------------------파일 설명----------------------------------------------------------------------------

파일(file) : 보조기억장치에서 문서, 소리, 그림, 동영상과 같은 자료를 모아놓은 것
– 파일 안에는 바이트들이 순차적으로 저장되어 있고 맨 끝에는 EOF(end-of-file) 마커가 있음
– 모든 파일은 입출력 동작이 발생하는 위치를 나타내는 위치 표시자(position indicator)를 가지고 있음

------------------------------------------이진파일 -----------------------------------------------------------------------------

이진 파일(binary file)은 데이터가 직접 저장되어 있는 파일
– 장점 : 효율성 → 읽는 속도 빨라짐, 저장공간 적게 차지, 컴퓨터 기종이 달라도 파일이동이 가능
– 단점 : 인간이 파일의 내용을 확인하기가 힘듦, 이식성이 떨어짐
→ 정수나 실수 데이터 표현하는 방식이 컴퓨터 시스템마다 다를 수 있음
– ➔ 이식성이 중요하다면 약간 비효율적이더라도 텍스트 형식의 파일을 사용
– ➔ 데이터가 상당히 크고 실행 속도가 중요하다면 이진파일로

------------------------------------------임의 접근 파일-----------------------------------------------------------------------

순차 접근(sequential access): 데이터를 파일의 처음부터 순차적으로 읽거나 기록하는 것
– 한번 읽은 데이터를 다시 읽으려면 현재의 파일을 닫고 다시 열어야 함
– 앞부분을 읽지 않고 건너뛸 수도 없음
임의 접근(random access): 파일 포인터를 이동시켜서 랜덤하게 읽고 쓰는 것이 가능
------------------------------------------임의 접근의 원리---------------------------------------------------------------------

위치 표시자(file pointer)의 이동
– 새 파일의 위치 표시자는 값이 0(파일의 시작 부분)
– 기존 파일의 경우, 추가모드에서 열렸을 경우 파일의 끝이 되고, 다른 모드인 경우에는
파일의 시작 부분을 가리킴
– 위치 표시자를 조작하여 파일을 원하는 임의의 위치에서 읽을 수 있음
– seek(): 위치 표시자 조작
– tell(): 현재 위치를 반환

------------------------------------------객체 입출력---------------------------------------------------------------------------

pickle 모듈의 dump()와 load() 메소드를 사용하면 객체를 쓰고 읽을 수 있음
▪ 파이썬 객체 구조를 바이트 스트림으로 변환해서 저장
– dump()한 순서대로 load()됨

------------------------------------------예외 처리------------------------------------------------------------------------------

try:
   예외가 발생할 수 있는 문장
except 오류내용1:
   오류내용1이면 이 블록이 실행된다.(예외를 처리하는 문장)
except 오류내용2:
   오류내용2이면 이 블록이 실행된다.(예외를 처리하는 문장)
else:
    예외가 없는 경우에 실행된다.

